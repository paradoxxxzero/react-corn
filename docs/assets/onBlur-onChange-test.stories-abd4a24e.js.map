{"version":3,"file":"onBlur-onChange-test.stories-abd4a24e.js","sources":["../../stories/sandbox/onBlur-onChange-test.stories.jsx"],"sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport { useCorn } from '@react-corn/core';\nimport { Quill } from '@react-corn/quill';\nimport { ButtonRow, Number, Select, Text } from '@react-corn/simple';\nimport { memo, useState } from 'react';\nimport styled from 'styled-components';\nimport { highlight } from '../helpers/highlight';\nconst initialItem = {\n  text: 'text',\n  int: 84,\n  html: '<p>H<strong>T</strong><u>M</u><em>L</em></p>',\n  select: Infinity\n};\nconst choices = {\n  one: 'I',\n  two: 'II',\n  three: 'III',\n  four: 'IV',\n  five: 'V'\n};\nconst List = styled.ul`\n  list-style: none;\n  overflow: auto;\n  max-height: 300px;\n`;\nconst ListItem = styled.li`\n  margin: 0.5em;\n  > div {\n    margin-left: 1em;\n    font-size: 13px;\n    font-family: 'Fira Code', monospace;\n  }\n`;\nconst Log = memo(function Log({\n  changes\n}) {\n  return <List>\n      {changes.slice().reverse().map(({\n      stamp,\n      type,\n      newItem,\n      errors\n    }) => <ListItem key={stamp.getTime()}>\n            <small>{stamp.toISOString().split('T')[1].replace('Z', '')}</small>{' '}\n            - <strong>{type}</strong>\n            {<div dangerouslySetInnerHTML={{\n        __html: '<i> item: </i>' + highlight(JSON.stringify(newItem), 'json')\n      }} />}\n            {<div dangerouslySetInnerHTML={{\n        __html: '<i> errors: </i>' + highlight(JSON.stringify(errors), 'json')\n      }} />}\n          </ListItem>)}\n    </List>;\n});\nconst inlineBlock = {\n  display: 'inline-block'\n};\nexport const OnChangeOnBlurTest = () => {\n  const [item, setItem] = useState(initialItem);\n  const [changes, setChanges] = useState([]);\n  const {\n    form,\n    field,\n    modified,\n    onReset\n  } = useCorn({\n    item,\n    onSubmit: newItem => {\n      const accepted = window.confirm(`You submitted \"${Object.values(newItem).join(', ')}\"`);\n      accepted && setItem(newItem);\n    },\n    onChange: (newItem, itemDiff, errors) => {\n      setChanges([...changes, {\n        stamp: new Date(),\n        type: 'change',\n        newItem,\n        itemDiff,\n        errors\n      }]);\n    },\n    onBlur: (newItem, itemDiff, errors) => {\n      setChanges([...changes, {\n        stamp: new Date(),\n        type: 'blur',\n        newItem,\n        itemDiff,\n        errors\n      }]);\n    }\n  });\n  return <>\n      <form {...form}>\n        <Text required {...field(`text`)}>\n          Text\n        </Text>\n        <Number required {...field(`int`)}>\n          Number\n        </Number>\n        <Quill style={inlineBlock} required {...field(`html`)}>\n          HTML\n        </Quill>\n        <Select required choices={choices} {...field(`select`)}>\n          Select\n        </Select>\n\n        <div style={{\n        width: '100%'\n      }} />\n        <ButtonRow>\n          <button disabled={!modified}>Submit</button>\n          <button type=\"button\" disabled={!modified} onClick={onReset}>\n            Reset\n          </button>\n        </ButtonRow>\n      </form>\n      <Log changes={changes} />\n    </>;\n};\nexport default {\n  title: 'Sandbox/onBlur-onChange-test',\n  parameters: {\n    options: {\n      showPanel: false\n    }\n  }\n};\nOnChangeOnBlurTest.parameters = {\n  ...OnChangeOnBlurTest.parameters,\n  docs: {\n    ...OnChangeOnBlurTest.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const [item, setItem] = useState(initialItem);\\n  const [changes, setChanges] = useState([]);\\n  const {\\n    form,\\n    field,\\n    modified,\\n    onReset\\n  } = useCorn({\\n    item,\\n    onSubmit: newItem => {\\n      const accepted = window.confirm(`You submitted \\\"${Object.values(newItem).join(', ')}\\\"`);\\n      accepted && setItem(newItem);\\n    },\\n    onChange: (newItem, itemDiff, errors) => {\\n      setChanges([...changes, {\\n        stamp: new Date(),\\n        type: 'change',\\n        newItem,\\n        itemDiff,\\n        errors\\n      }]);\\n    },\\n    onBlur: (newItem, itemDiff, errors) => {\\n      setChanges([...changes, {\\n        stamp: new Date(),\\n        type: 'blur',\\n        newItem,\\n        itemDiff,\\n        errors\\n      }]);\\n    }\\n  });\\n  return <>\\n      <form {...form}>\\n        <Text required {...field(`text`)}>\\n          Text\\n        </Text>\\n        <Number required {...field(`int`)}>\\n          Number\\n        </Number>\\n        <Quill style={inlineBlock} required {...field(`html`)}>\\n          HTML\\n        </Quill>\\n        <Select required choices={choices} {...field(`select`)}>\\n          Select\\n        </Select>\\n\\n        <div style={{\\n        width: '100%'\\n      }} />\\n        <ButtonRow>\\n          <button disabled={!modified}>Submit</button>\\n          <button type=\\\"button\\\" disabled={!modified} onClick={onReset}>\\n            Reset\\n          </button>\\n        </ButtonRow>\\n      </form>\\n      <Log changes={changes} />\\n    </>;\\n}\",\n      ...OnChangeOnBlurTest.parameters?.docs?.source\n    }\n  }\n};"],"names":["initialItem","choices","List","styled","ListItem","Log","memo","changes","jsx","stamp","type","newItem","errors","highlight","inlineBlock","OnChangeOnBlurTest","item","setItem","useState","setChanges","form","field","modified","onReset","useCorn","itemDiff","jsxs","Fragment","Text","Number","Quill","Select","ButtonRow","onBlurOnChangeTest_stories","_a","_c","_b"],"mappings":"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"}