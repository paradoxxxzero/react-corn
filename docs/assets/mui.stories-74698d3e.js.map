{"version":3,"file":"mui.stories-74698d3e.js","sources":["../../stories/mui.stories.jsx"],"sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport { Chip, InputAdornment } from '@mui/material';\nimport { useCorn } from '@react-corn/core';\nimport { Autocomplete, Checkbox, Email, Inline, Money, Number, Password, Select, Slider, Text, TextArea } from '@react-corn/mui';\nimport { memo, useCallback } from 'react';\nimport { Button, Form } from './helpers/muiForm';\nimport { Story } from './helpers/Story';\nexport default {\n  title: '@react-corn/mui',\n  parameters: {\n    options: {\n      showPanel: true\n    }\n  }\n};\nconst continents = {\n  Africa: 'AF',\n  Antarctica: 'AN',\n  Asia: 'AS',\n  Europe: 'EU',\n  'North America': 'NA',\n  'Australia/Oceania': 'AU',\n  'South America': 'SA'\n};\nconst colors = {\n  White: '#ffffff',\n  Silver: '#c0c0c0',\n  Gray: '#808080',\n  Black: '#000000',\n  Red: '#ff0000',\n  Maroon: '#800000',\n  Yellow: '#ffff00',\n  Olive: '#808000',\n  Lime: '#00ff00',\n  Green: '#008000',\n  Aqua: '#00ffff',\n  Teal: '#008080',\n  Blue: '#0000ff',\n  Navy: '#000080',\n  Fuchsia: '#ff00ff',\n  Purple: '#800080'\n};\nconst CornForm = memo(({\n  item,\n  onItem,\n  onTransient,\n  onDelta,\n  onErrors\n}) => {\n  const handleChange = useCallback((transient, delta, errors) => {\n    onTransient(transient);\n    onErrors(errors);\n  }, [onErrors, onTransient]);\n  const handleSubmit = useCallback((item, delta) => {\n    onItem(item);\n    onDelta(delta);\n  }, [onDelta, onItem]);\n  const {\n    form,\n    field,\n    modified,\n    onReset\n  } = useCorn({\n    item,\n    onChange: handleChange,\n    onSubmit: handleSubmit\n  });\n  return <Form {...form}>\n      <Inline>\n        <Text required maxLength={25} {...field('name')}>\n          Name\n        </Text>\n        <Email disabled {...field('mail')}>\n          Mail\n        </Email>\n        <Password variant=\"filled\" {...field('password')}>\n          Mot de passe\n        </Password>\n      </Inline>\n      <Inline>\n        <Number style={{\n        width: '6ch'\n      }} {...field('address.number', {\n        InputProps: ({\n          address: {\n            number: num\n          }\n        }) => num ? {\n          endAdornment: <InputAdornment position=\"end\">\n                        {num > 20 || num < 10 ? {\n              1: 'st',\n              2: 'nd',\n              3: 'rd'\n            }[num % 10] || 'th' : 'th'}\n                      </InputAdornment>\n        } : undefined\n      })}>\n          Num\n        </Number>\n        <Text size={8} {...field('address.street')}>\n          Street name\n        </Text>\n      </Inline>\n      <Text {...field('address.city')}>City</Text>\n      <Text {...field('address.country')} InputLabelProps={{\n      shrink: true,\n      disableAnimation: true\n    }}>\n        Country\n      </Text>\n      <Slider min={12} max={100} valueLabelDisplay=\"auto\" {...field('age', v => v > 90 && 'You might be too old for that, sorry.')}>\n        Age\n      </Slider>\n      <Select choices={Object.keys(continents)}\n    // multiple\n    {...field('address.continent', continent => continent === 'Australia/Oceania' && 'Sorry but choose a closest continent')}>\n        Continent\n      </Select>\n      <Inline>\n        <TextArea {...field('message')}>Message</TextArea>\n        <Checkbox option=\"Away\" {...field('away')} required>\n          Status\n        </Checkbox>\n      </Inline>\n      <Inline>\n        <Money size=\"small\" InputProps={{\n        endAdornment: <InputAdornment position=\"end\">$</InputAdornment>\n      }} {...field('price')}>\n          Price\n        </Money>\n        <Checkbox noIndeterminate {...field('taxes')}>\n          Incl. taxes\n        </Checkbox>\n      </Inline>\n\n      <Button type=\"submit\" disabled={!modified} color=\"primary\" variant=\"contained\">\n        Submit\n      </Button>\n      <Button disabled={!modified} onClick={onReset}>\n        Reset\n      </Button>\n    </Form>;\n});\nconst getContrast = rgb => [299, 587, 114].reduce((s, k, i) => s + parseInt(rgb.substring(1 + i * 2, 1 + (i + 1) * 2), 16) * k) >= 2 ** 7 * 1000;\nconst AutocompleteCornForm = memo(({\n  item,\n  onItem,\n  onTransient,\n  onDelta,\n  onErrors\n}) => {\n  const handleChange = useCallback((transient, delta, errors) => {\n    onTransient(transient);\n    onErrors(errors);\n  }, [onErrors, onTransient]);\n  const handleSubmit = useCallback((item, delta, cleanItem) => {\n    onItem(cleanItem);\n    onDelta(delta);\n  }, [onDelta, onItem]);\n  const {\n    form,\n    field,\n    modified,\n    onReset\n  } = useCorn({\n    item,\n    onChange: handleChange,\n    onSubmit: handleSubmit\n  });\n  return <Form {...form}>\n        <Autocomplete choices={continents} {...field('continent')}>\n          Continent\n        </Autocomplete>\n        <Autocomplete required pattern=\"^.?U$\" width={400} choices={continents} {...field('continent-validation')}>\n          Continent with value ending with U validation\n        </Autocomplete>\n        <Autocomplete required multiple meta={colors} width={250} choices={Object.keys(colors)} renderOption={(props, option) => <li {...props}>\n              <span style={{\n        color: option.meta\n      }}>{option.title}</span>\n            </li>} {...field('colors')}>\n          Color label (custom style)\n        </Autocomplete>\n        <Autocomplete required multiple width={400} choices={colors} renderOption={(props, option) => <li {...props}>\n              <span style={{\n        color: option.value\n      }}>{option.title}</span>\n            </li>} renderTags={(value, getTagProps) => value.map((option, index) =>\n    // eslint-disable-next-line react/jsx-key\n    <Chip variant=\"outlined\" label={option.title} {...getTagProps({\n      index\n    })} style={{\n      color: getContrast(option.value) ? 'black' : 'white',\n      backgroundColor: option.value\n    }} />)} {...field('colors-value')}>\n          Color value (custom tag)\n        </Autocomplete>\n        <Inline>\n          <Autocomplete free choices={continents} {...field('free-continent')}>\n            Free Continent\n          </Autocomplete>\n          <Autocomplete free multiple choices={colors} {...field('free-colors')}>\n            Free Colors\n          </Autocomplete>\n        </Inline>\n        <Button type=\"submit\" disabled={!modified} color=\"primary\" variant=\"contained\">\n          Submit\n        </Button>\n        <Button onClick={onReset}>Reset</Button>\n      </Form>;\n});\nexport const MaterialUIDemoAutocomplete = () => {\n  return <Story Chapter={AutocompleteCornForm} initialItem={{\n    continent: 'EU',\n    'colors-value': ['#008080', '#800080', '#000000']\n  }} />;\n};\nexport const MaterialUIDemo = () => {\n  return <Story Chapter={CornForm} initialItem={{\n    name: 'John Foo',\n    mail: 'john.foo@example.com',\n    password: 'qwerty',\n    address: {\n      zipcode: 'Z4755A',\n      city: 'Barville',\n      continent: 'Europe'\n    },\n    age: 25,\n    message: 'Hello,\\nHow are you?',\n    price: '12.25'\n  }} />;\n};\nMaterialUIDemoAutocomplete.parameters = {\n  ...MaterialUIDemoAutocomplete.parameters,\n  docs: {\n    ...MaterialUIDemoAutocomplete.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  return <Story Chapter={AutocompleteCornForm} initialItem={{\\n    continent: 'EU',\\n    'colors-value': ['#008080', '#800080', '#000000']\\n  }} />;\\n}\",\n      ...MaterialUIDemoAutocomplete.parameters?.docs?.source\n    }\n  }\n};\nMaterialUIDemo.parameters = {\n  ...MaterialUIDemo.parameters,\n  docs: {\n    ...MaterialUIDemo.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  return <Story Chapter={CornForm} initialItem={{\\n    name: 'John Foo',\\n    mail: 'john.foo@example.com',\\n    password: 'qwerty',\\n    address: {\\n      zipcode: 'Z4755A',\\n      city: 'Barville',\\n      continent: 'Europe'\\n    },\\n    age: 25,\\n    message: 'Hello,\\\\nHow are you?',\\n    price: '12.25'\\n  }} />;\\n}\",\n      ...MaterialUIDemo.parameters?.docs?.source\n    }\n  }\n};"],"names":["mui_stories","continents","colors","CornForm","memo","item","onItem","onTransient","onDelta","onErrors","handleChange","useCallback","transient","delta","errors","handleSubmit","form","field","modified","onReset","useCorn","jsxs","Form","Inline","jsx","Text","Email","Password","Number","num","InputAdornment","Slider","v","Select","continent","TextArea","Checkbox","Money","Button","getContrast","rgb","s","k","i","AutocompleteCornForm","cleanItem","Autocomplete","props","option","value","getTagProps","index","Chip","MaterialUIDemoAutocomplete","Story","MaterialUIDemo","_a","_c","_b"],"mappings":"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"}